// ===== Main Web App Function =====
function doGet(e) {
  Logger.log(JSON.stringify(e));  // Debug: log all incoming parameters
  
  var result = 'Ok';  // Default response message
  
  // ===== Case 1: ESP32 sends parameters (write to Google Sheet) =====
  if (e.parameter && e.parameter.sts !== undefined) {
    
    // --- Spreadsheet Setup ---
    var sheet_id = '1Dgf9J-cBjC2BWpp18VJfcl0EdEF6dor8cMjQ9rYmYZA';  // Replace with your own Google Sheet ID
    var sheet_name = "Page1";  // Target sheet name
    var sheet_open = SpreadsheetApp.openById(sheet_id);
    var sheet_target = sheet_open.getSheetByName(sheet_name);
    
    // --- Row Preparation ---
    var newRow = sheet_target.getLastRow() + 1;  // Next empty row
    var rowDataLog = [];  // Store one row of data
    
    // --- Date & Time (Asia/Jakarta timezone) ---
    var Curr_Date = Utilities.formatDate(new Date(), "Asia/Jakarta", 'dd/MM/yyyy');
    rowDataLog[0] = Curr_Date;  // Column A → Date
    var Curr_Time = Utilities.formatDate(new Date(), "Asia/Jakarta", 'HH:mm:ss');
    rowDataLog[1] = Curr_Time;  // Column B → Time
    
    // --- Parameter Handling ---
    var sts_val = '';
    for (var param in e.parameter) {
      var value = stripQuotes(e.parameter[param]);  // Clean incoming values
      
      switch (param) {
        case 'sts':  // Status flag
          sts_val = value;
          break;
        case 'aht20_temp.temperature':  // Temperature
          rowDataLog[2] = value;  // Column C → Temperature
          break;
        case 'aht20_humidity.relative_humidity':  // Humidity
          rowDataLog[3] = value;  // Column D → Humidity
          break;
        default:
          result += ", unsupported parameter";  // Ignore unknown params
      }
    }
    
    // --- Write Data if sts == "write" ---
    if (sts_val == 'write') {
      Logger.log(JSON.stringify(rowDataLog));  // Debug
      
      // Append new row (Date, Time, Temp, Humidity)
      var newRangeDataLog = sheet_target.getRange(newRow, 1, 1, rowDataLog.length);
      newRangeDataLog.setValues([rowDataLog]);
      
      // Update "Latest Data" section (Row 2, Columns A–D)
      var RangeDataLatest = sheet_target.getRange('A2:D2');
      RangeDataLatest.setValues([[ rowDataLog[0], rowDataLog[1], rowDataLog[2], rowDataLog[3] ]]);
      
      return ContentService.createTextOutput(result);  // Return success message
    }
    
  } 
  
  // ===== Case 2: No parameters → Return all data as JSON (for UI/dashboard) =====
  else {
    var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Data");  // "Data" sheet for JSON export
    var data = sheet.getDataRange().getValues();
    var jsonData = {};
    
    // --- Assume first row is headers ---
    var headers = data[0];
    jsonData['data'] = [];
    
    // --- Loop through rows (skip header row) ---
    for (var i = 1; i < data.length; i++) {
      var row = {};
      for (var j = 0; j < headers.length; j++) {
        row[headers[j]] = data[i][j];  // Map header → value
      }
      jsonData['data'].push(row);
    }
    
    // --- Return JSON response ---
    return ContentService.createTextOutput(JSON.stringify(jsonData))
      .setMimeType(ContentService.MimeType.JSON);
  }
}

// ===== Helper Function =====
// Remove surrounding quotes from string values
function stripQuotes(value) {
  return value.replace(/^["']|['"]$/g, "");
}
